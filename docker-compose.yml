version: '3.7'
services:
  # Todo: Postgresql
  postgresql:
    container_name: postgresql
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: '${POSTGRES_DB}'
      POSTGRES_USER: '${POSTGRES_USER}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
      PGDATA: '/data/postgres'
    volumes:
      - db_data/:/var/lib/postgresql/data/postgres:ro
      - ./database/init/init.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - .env
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    networks:
      - service_pink_app-network
    healthcheck:
      test: ['CMD-SHELL', "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Todo: Service pink_app
  service:
    container_name: service_pink_app
    restart: always
    depends_on:
      - postgresql
    build:
      dockerfile: ./docker/Dockerfile
      context: .
    environment:
      - NODE_ENV=DEV
    ports:
      - ${PORT}:${PORT}
    volumes:
      - './src:/usr/src/app/src'
    env_file:
      - .env
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${PORT}/api/v1']
      interval: 60s
      timeout: 2s
      retries: 3
    networks:
      - service_pink_app-network

networks:
  service_pink_app-network:
    driver: bridge
volumes:
  db_data:
    driver: local
